teste

comandos: git init: entra na pasta
	  git status: ve sê o arquivo está atualizado
	  git add: adiciona o arquivo no controle de versão do GIT
          git add . : Adiciona todos os arquivos da pasta no controle de versão do GIT
	  git commit -m "exemplo": cria uma versão do código, o "-m" significa mensagem	
	  git config --global user.email: serve para fazer o repositório no site do GITHUB
          git config --global user.name: Serve para atrelar o código no seu nome
	  git push: envia as alterações para a nuvem
	  git remote add origin: serve para adicionar o link do repositório do github que foi criado
	  git reflog: verifica o histórico de atualizações
	  git branch: mostra as Branches que estão disponíveis no momento
	  git checkout nomedabranch: troca para outra branch
          git merge nomedabranch: mescla atualizações de uma branch para outra
	  git pull: puxa a versão mais recente e atualizada do código
	  git checkout -b nome: cria uma nova branch com base na branch principal e troca para ela	
	  touch .gitignore: cria um arquivo para identificar as pastas que não serão enviadas pro controle de versão. No arquivo, escrever: nomedapasta/
          ou nomedoarquivo.extensão

Podemos criar várias versões do projeto:
	  1º passo: git add .
          2º passo: git commit -m "relato da alteração"
          3º passo: git push: envia as alterações para o servidor do github 

Navegar no histórico de atualizações:
	  1º passo: git reflog
	  2º passo: buscar os IDs que aparecem em amarelo logo após aplicar o comando
          3º passos: git reset --hard 1658aa4 (ID de exmplo)
	  Após seguir esses passos, o arquivo voltará a versão anterior escolhida

Branches
          São caminhos diferentes que podemos seguir em um projeto, cada branch é um local para o
	  armazenamento do código. A branch master é a principal que enviamos nossas versões.
  	  Podemos criar várias Branches paralelas para criar outros códigos, e passar o código
	  das Branches paralelas para a branch principal assim que tivermos certeza do processo.
	  O nome desse processo é merge.
	  Branching com o nome de Staging é uma branch para códigos que estão no processo de teste
          A branch que estamos usando no momento fica verde e com um asterísco do lado.
	  As atualizações de uma branch não são transferidas para outra automaticamente.

Como fazer um merge entre 2 branches (staging e master)
	  IMPORTANTE: ANTES DE FAZER MERGE, SEMPRE PUXAR A VERSÃO MAIS ATUALIZADA DA NUVEM ANTES, POIS CASO TENHA SIDO FEITA
	  UMA ALTERAÇÃO NO CÓDIGO FONTE, A SUA ATUALIZAÇÃO PODE SER FEITA EM UMA VERSÃO ANTIGA
	  Para fazer isso, usamos o comando git pull
	  1º Entrar na branch que quer que receba as atualizações com git checkout nomedabranch
	  2º usar o comando de merge com a branch que teve a alteração ou ataulização (git merge nomedabranch)
  	  3º git push

Ciclo para fazer merge:
	  1º git pull da branch principal
  	  2º gerar uma nova branch a partir da branch principal
   	  3º Trabalhar e adicionar novas funcionalidades na nova branch
	  4º Finalizar o trabalho na branch temporária
  	  5º Git checkout na branch principal	
	  6º Git pull
	  7º Unir (merge) o código da branch temporária com a branch principal (depois de testar)
	  8º Git push da branch principal
	
Pull request:    	
	  É usado quando se trabalha em um grupo, e uma alteração no código, precisa ser avaliada por um supervisor antes
	  de ser mesclado com a branch principal, para isso, entramos no github após o envio do git push, e vamos em open e pull request
	  Ao selecionar essa opção, abrirá um caixa de texto, na qual podemos dizer com mais detalhes o que foi feito na alteração
	  Após detalhar, clicamos em create pull request   
   
Git ignore: 	
	  Serve para arquivos, dados ou pastas que não queremos incluir no controle de versão	
			
		